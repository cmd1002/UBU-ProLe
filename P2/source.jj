options {
    BUILD_TOKEN_MANAGER=true;
    COMMON_TOKEN_ACTION=false;
    DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(SequenceDiagram)

import java.util.HashMap;
import java.util.Map;

public class SequenceDiagram {
    public static void main(String args[]) throws java.io.FileNotFoundException {
        SequenceDiagramTokenManager tokenManager;
        if (args.length < 1) {
            tokenManager = new SequenceDiagramTokenManager(new SimpleCharStream(System.in));
        } else {
            tokenManager = new SequenceDiagramTokenManager(new SimpleCharStream( new java.io.FileInputStream(args[0]),0,0));
        }

        try {
            while (tokenManager.getNextToken().kind != EOF); // Process All tokens.
            System.out.println("- El participante con el nombre más largo es: " + SequenceDiagramTokenManager.longestName);
            System.out.println("- El diagrama tiene " + SequenceDiagramTokenManager.messageCount + " mensajes.");
            System.out.println("- El mensaje de mayor longitud es: " + SequenceDiagramTokenManager.longestMessage);
            if (SequenceDiagramTokenManager.groupCount == 0) {
                System.out.println("- No tiene agrupaciones.");
            } else {
                System.out.println("- El diagrama tiene " + SequenceDiagramTokenManager.groupCount + " agrupaciones.");
                Map.Entry<String, Integer> largestGroup = SequenceDiagramTokenManager.getLargestGroup();
                System.out.println("- La agrupación \"" + largestGroup.getKey() + "\" tiene " + largestGroup.getValue() + " mensajes.");
            }

        } catch (TokenMgrError x) {
            System.out.println("Token Manager caught an unexpected exception, exiting...");
            throw x;
        }
    }
}
PARSER_END(SequenceDiagram)

TOKEN_MGR_DECLS:
{
    static String longestName = "";
    static String longestMessage = "";
    static int messageCount = 0;
    static int groupCount = 0;
    static HashMap<String, Integer> groupStack = new HashMap<String, Integer>();

    static public Map.Entry<String, Integer> getLargestGroup() {
        Map.Entry<String, Integer> maxEntry = null;
        for (Map.Entry<String, Integer> entry : groupStack.entrySet()) {
            if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {
                maxEntry = entry;
            }
        }
        return maxEntry;
    }
}

<*>TOKEN : {
    // Para tratar cadenas como "una /* cadena */ que no es //comentario"
    //  < BCAD: "\"" > : CAD
    <COM_LINE_START: "//" > : COM_LINE
    | <COM_MULTI_START: "/'" > : COM_MULTI
    | <DIAGRAM_START: "@startuml"> : DIAGRAM
    //| <STRING: "'"(~[]|"\\"~[])"'" >
}

TOKEN : { // Definitions
    <#EOL: "\n">
    | <#ALPHA: ["a"-"z", "A"-"Z"]>
    | <#NUM: ["0"-"9"]>
    | <#ORIGIN_START: "Alumno">
    | <#GROUP_START: "if">
}

<DIAGRAM>TOKEN : {
    <DIAGRAM_END: "@enduml"> : DEFAULT
    | <DIAGRAM_GROUP:<GROUP_START>> : GROUP
    | <DIAGRAM_ORIGIN:<ORIGIN_START>> : ORIGIN
}
<DIAGRAM>SKIP : {
  " " | "\t" | "\n" | "\r" | <~[]>
}

<GROUP>TOKEN : {
    <GROUP_END:"----"> : DIAGRAM
}
<GROUP>SKIP : {
  " " | "\t" | "\n" | "\r" | <~[]>
}

<ORIGIN>TOKEN : {
    <ARROW: "->"> : DIAGRAM
}
<ORIGIN>SKIP : {
  " " | "\t" | "\n" | "\r" | <~[]>
}



/*<CAD>TOKEN :
{
   < ECAD: "\""> : DEFAULT
 // Caracteres escapados. Para tratar cosas como "cadena\"con comillas"
 | < ESCCHAR: "\\"~[] >
 | < RESTCAD: ~[] >
 // Para que el resto de tokenes que 'ignorar' más largos
 | < REST2CAD: (~["\"","\\"])+ >
}*/

<COM_LINE>TOKEN : {
    < COM_LINE_END: "\n"> : DEFAULT
    | < COM_LINE_OTHER: ~[] >
    | < COM_LINE_OTHER_LONGEST: (~["\n"])+ >
}

<COM_MULTI>TOKEN : {
    <COM_MULTI_END: "'/"> : DEFAULT
    | <COM_MULTI_OTHER: ~[]>
    | <COM_MULTI_LONGEST: (~["'","/"])+>
}


SKIP : {
  " " | "\t" | "\r" | <~[]>
}
