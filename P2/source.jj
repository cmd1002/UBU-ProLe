options {
    BUILD_TOKEN_MANAGER=true;
    DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(SequenceDiagram)

import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayDeque;

public class SequenceDiagram {
    public static void main(String args[]) throws java.io.FileNotFoundException {
        SequenceDiagramTokenManager tokenManager;
        if (args.length < 1) {
            tokenManager = new SequenceDiagramTokenManager(new SimpleCharStream(System.in));
        } else {
            tokenManager = new SequenceDiagramTokenManager(new SimpleCharStream( new java.io.FileInputStream(args[0]),0,0));
        }

        try {
            while (tokenManager.getNextToken().kind != EOF); // Process All tokens.
            System.out.println("- El participante con el nombre más largo es: " + SequenceDiagramTokenManager.longestName);
            System.out.println("- El diagrama tiene " + SequenceDiagramTokenManager.messageCount + " mensajes.");
            System.out.println("- El mensaje de mayor longitud es: " + SequenceDiagramTokenManager.longestMessage);
            if (SequenceDiagramTokenManager.groupCount == 0) {
                System.out.println("- No tiene agrupaciones.");
            } else {
                System.out.println("- El diagrama tiene " + SequenceDiagramTokenManager.groupCount + " agrupaciones.");
                System.out.println("- La agrupación \"" + SequenceDiagramTokenManager.largestGroup.getKey() +
                        "\" tiene " + SequenceDiagramTokenManager.largestGroup.getValue() + " mensajes.");
            }

        } catch (TokenMgrError x) {
            System.out.println("Token Manager caught an unexpected exception, exiting...");
            throw x;
        }
    }
}
PARSER_END(SequenceDiagram)

TOKEN_MGR_DECLS : {
    /* Data output variables */
    static String longestName = "";
    static String longestMessage = "";
    static int messageCount = 0;
    static int groupCount = 0;
    static SimpleEntry<String, Integer> largestGroup = null;

    /* Internal variables and methods*/
    static int previousState = -1;
        // The previous state before going to multi-line comment state.
    static ArrayDeque<SimpleEntry<String, Integer>> groupStack = new ArrayDeque<SimpleEntry<String, Integer>>();
        // In this Queue each group is stored until it ends, the key is the name and the value the number of messages. FIFO.
    static void checkName() { // Name on image, check if it's the longest.
        final String name = image.toString().trim();
        if (name.length() > longestName.length()) {
            longestName = name;
        }
    }
    static void checkMessage() { // Message on image, check if it's the longest, add to current group if it's inside one.
        final String message = image.toString().trim();
        if (message.length() > longestMessage.length()) {
            longestMessage = message;
        }
        messageCount++;
        if (groupStack.size() > 0) {
            final SimpleEntry<String, Integer> currentGroup = groupStack.peekFirst();
            currentGroup.setValue(currentGroup.getValue() + 1);
        }
    }
    static void startGroup() { // Group on image, append to stack.
        groupStack.addFirst(new SimpleEntry<String, Integer>(image.toString().trim(), 0));
    }
    static void endGroup() { // Remove current group from stack and check if it's the largest.
        final SimpleEntry<String, Integer> currentGroup = groupStack.pollFirst();
        if (currentGroup == null) {
            throw new RuntimeException("Unexpected end of group, none was currently open.");
        } else if (largestGroup == null || currentGroup.getValue() > largestGroup.getValue()) {
            largestGroup = currentGroup;
        }
        groupCount++;
    }
}

/* ALL */
<*>TOKEN : {
    <COM_MULTI_START: "/'" > {previousState = curLexState;} :  COM_MULTI

    /* DEFINITIONS */
    | <#ALPHA: ["a"-"z", "A"-"Z"]>
    | <#NUM: ["0"-"9"]>
    | <#COM_LINE: "'"(~["\n"])*"\n">
    | <#ID: ("\""(~["\"","\n","\r"])+"\"")|(<ALPHA>|<NUM>)+>
}
<COM_MULTI>TOKEN : { // MULTI-LINE COMMENT
    <COM_MULTI_END: "'/"> {SwitchTo(previousState);}
    | <COM_MULTI_OTHER: ~[]>
    | <COM_MULTI_LONGEST: (~["'","/"])+>
}

/* DEFAULT | INITIAL */
<DEFAULT>TOKEN : {
    <DIAGRAM_START: "@startuml"> : DIAGRAM
}
<DEFAULT>SKIP : {
    <DEFAULT_COM_LINE: <COM_LINE>> | "\n" | "\r"
}

/* DIAGRAM */
<DIAGRAM>TOKEN : {
    <DIAGRAM_END: "@enduml"> : DEFAULT
    | <DIAGRAM_GROUP: <GROUP_START>> : GROUP
    | <DIAGRAM_GROUP_END: <GROUP_END>> {endGroup();}
    | <DIAGRAM_GROUP_RESET: <GROUP_END_AND_START>> {endGroup();} : GROUP
    | <DIAGRAM_DECLARATION_START: <DECLARATION_START>> : DECLARATION
    | <DIAGRAM_ORIGIN: <ID>> : ORIGIN

    /* DECLARATIONS */
    | <#GROUP_START: "alt"|"opt"|"loop"|"par"|"break"|"critical"|"group">
    | <#GROUP_END: "end">
    | <#GROUP_END_AND_START: "else">
    | <#DECLARATION_START: "participant"|"actor"|"boundary"|"control"|"entity"|"database">
}
<DIAGRAM>SKIP : {
  <DIAGRAM_COM_LINE: <COM_LINE>> | " " | "\t" | "\n" | "\r"
}

/* GROUP */
<GROUP>TOKEN : {
    <GROUP_NAME: (~["\n", "\r", "'", "/"])+> {startGroup();}
    | <GROUP_NAME_END: "\n"|"\r"> : DIAGRAM
}
<GROUP>SKIP : {
  <GROUP_COM_LINE: <COM_LINE>>
}

/* DECLARATION */
<DECLARATION>TOKEN : {
    <DECLARATION_ID: <ID>> {checkName();} : DECLARATION_OPTIONAL
}
<DECLARATION>SKIP : {
  " " | "\t"
}

/* DECLARATION_OPTIONAL */
<DECLARATION_OPTIONAL>TOKEN : {
    <DECLARATION_OPTIONAL_END: "\n"|"\r"> : DIAGRAM
}
<DECLARATION_OPTIONAL>SKIP : {
  <~["\n", "\r"]>
}

/* ORIGIN */
<ORIGIN>TOKEN : {
    <ORIGIN_ARROW: <ARROW>> : DESTINY

    /* DECLARATIONS */
    | <#ARROW_HEAD_LEFT: ("o"|"x")?(("<"){1,2}|("/"){1,2}|("\\"){1,2})?>
    | <#ARROW_HEAD_RIGHT: ((">"){1,2}|("/"){1,2}|("\\"){1,2})?("o"|"x")?>
    | <#ARROW_COLOR: "[#"(<ALPHA>|<NUM>)+"]">
    | <#ARROW: (<ARROW_HEAD_LEFT>)?"-"(<ARROW_COLOR>)?("-")?(<ARROW_HEAD_RIGHT>)?>
}
<ORIGIN>SKIP : {
  " " | "\t"
}

/* DESTINY */
<DESTINY>TOKEN : {
    <DESTINY_ID: <ID>> {checkName();} : MESSAGE_OPTIONAL
    | <DESTINY_END: "]"> : MESSAGE_OPTIONAL
}
<DESTINY>SKIP : {
  " " | "\t"
}

/* MESSAGE_OPTIONAL */
<MESSAGE_OPTIONAL>TOKEN : {
    <MESSAGE_OPTIONAL_MESSAGE: ":"> : MESSAGE
    | <MESSAGE_OPTIONAL_END: "\n"|"\r"> : MESSAGE_OPTIONAL
}
<MESSAGE_OPTIONAL>SKIP : {
  " " | "\t"
}

/* MESSAGE */
<MESSAGE>TOKEN : {
    <MESSAGE_DATA: (~["\n", "\r", "'", "/"])+> {checkMessage();}
    | <MESSAGE_END: "\n"|"\r"> : DIAGRAM
}
<MESSAGE>SKIP : {
    <MESSAGE_COM_LINE: <COM_LINE>>
}