options {
    STATIC=false;
	DEBUG_PARSER=false;
}

PARSER_BEGIN(Compiler)

/**
 * Language parser class.
 *
 * @author <a href="mailto:rdg1003@alu.ubu.es">Rodrigo Díaz García</a>
 */
public class Compiler {
    /**
     * Main method. Parses either stdin or a file.
     *
     * @param args if empty, the parser will parse stdin. Otherwise, it will parse the file in the first argument. 
     */
    public static void main(String args[]) {
        try {
            final Compiler compiler = initCompiler(args);
            compiler.program();
        } catch (java.io.FileNotFoundException ex) {
            System.out.println("File not found (" + args[0] + "), first argument must be a valid path.");
        } catch (ParseException ex) {
            System.out.println(ex);
            System.out.println("Parser caught an unexpected exception, exiting...");
        }
    }

    /**
     * Creates the compiler according to the given arguments.
     *
     * @param args if empty, the parser will parse stdin. Otherwise, it will parse the file in the first argument.
     * @return a Compiler instance.
     */
    static Compiler initCompiler(String args[]) throws java.io.FileNotFoundException {
        if (args.length < 1) {
            return new Compiler(System.in);
        }
        return new Compiler(new java.io.FileInputStream(args[0]));
    }

    /**
     * The current label.
     */
    public static int labelCount = 0;
    
    /**
     * Get the next label.
     *
     * @return the latest label.
     */
    public static int getNewLabel() {
        return Compiler.labelCount++;
    }
}

PARSER_END(Compiler)

TOKEN : {
    <NUMBER: (["0"-"9"])+>
|   <#ALPHA: ["a"-"z", "A"-"Z"]>
|   <END: "end">
|   <THEN: "then">
|   <DO: "do">
|   <ELSE: "else">
|   <IF: "if">
|   <ELIF: "elsif">
|   <UNLESS: "unless">
|   <UNTIL: "until">
|   <WHILE: "while">
|   <PRINT: "print">
|   <EOL: ";">
|   <EQUALS: "=">
|   <ADDITION: "+">
|   <ADDITION_EQUALS: "+=">
|   <SUBSTRACTION: "-">
|   <SUBSTRACTION_EQUALS: "-=">
|   <MULTIPLICATION: "*">
|   <MULTIPLICATION_EQUALS: "*=">
|   <DIVISION: "/">
|   <DIVISION_EQUALS: "/=">
|   <PARENTHESIS_START: "(">
|   <PARENTHESIS_END: ")">
|   <RESERVED: "class" | "ensure" | "nil" | "self" | "while" | "alias" | "defined" | "for" | "or" | "then" | "elsif" | "do" | "else" | "begin" | "unless" | "until" | "end" | "return" | "next" | "if" | "print">
|   <VARIABLE: (<ALPHA> | "_") (<ALPHA> | <NUMBER> | "_")*>
}

<*>SKIP : {
    <WHITESPACE: "\n" | "\r" | "\t" | " ">
|   <COM_LINE: "#" (~["\n", "\r"])*>
|   <COM_MULTI_START: "=begin" > : COM_MULTI
}

<COM_MULTI>SKIP : {
    <COM_MULTI_END: "=end"> : DEFAULT
|   <COM_MULTI_LONGEST: (~["="])+>
|   <COM_MULTI_OTHER: ~[]>
}


void program() : {} {
    statement() (";" program())?
}

void statement() : {} {
    primmary() | statementAssignment()
}

void statementAssignment() : {
    Token leftValue, rightValue;
    String operation;
    boolean eq, eq2;
} {
    leftValue = <VARIABLE> {System.out.println("\tvalori " + leftValue.image);}
    operation = assignment() {
        if (operation != null) {
            System.out.println("\tvalord " + leftValue.image);
        }
    }
    expression() {
        if (operation != null) {
            System.out.println('\t' + operation);
        }
        System.out.println("\tasigna");
    }
}

String assignment() : {} {
    <EQUALS> { return null; }
|   <ADDITION_EQUALS> { return "sum"; }
|   <SUBSTRACTION_EQUALS> { return "sub"; }
|   <MULTIPLICATION_EQUALS> { return "mul"; }
|   <DIVISION_EQUALS> { return "div"; }
}

void primmary() : {} {
    primmaryIf()
|   primmaryUnless()
|   primmaryUntil()
|   primmaryWhile()
|   primmaryPrint()
}

void primmaryThen() : {} {
    <THEN> program()
}

int primmaryDo(boolean condition) : {
    String conditionToString = condition ? "cierto" : "falso";
    int label;
} {
    <DO> {
        label = getNewLabel();
        System.out.println("\tsi" + conditionToString + "vea LBL" + label);
    }
    program()
    { return label; }
}

void primmaryElse(int label, int endLabel) : {} {
    <ELSE> {
        System.out.println("\tvea LBL" + endLabel);
        System.out.println("LBL" + label);
    }
    program()
}

void primmaryIf() : {
    int nextLabel, endLabel;
} {
    <IF>
    expression() {
        nextLabel = getNewLabel();
        endLabel = getNewLabel();
        System.out.println("\tsifalsovea LBL" + nextLabel);
    }
    primmaryThen()
    (nextLabel = primmaryElseIf(nextLabel, endLabel))*
    (primmaryElse(nextLabel, endLabel) | { System.out.println("LBL" + nextLabel); } )
    <END> { System.out.println("LBL" + endLabel); }
}

int primmaryElseIf(int label, int endLabel) : {
    int nextLabel;
} {
    <ELIF> {
        System.out.println("\tvea LBL" + endLabel);
        System.out.println("LBL" + label);
    }
    expression() {
        nextLabel = getNewLabel();
        System.out.println("\tsifalsovea LBL" + nextLabel);
    }
    primmaryThen()
    { return nextLabel; }
}

void primmaryUnless() : {
    int nextLabel;
} {
    <UNLESS>
    expression() {
        nextLabel = getNewLabel();
        System.out.println("\tsiciertovea LBL" + nextLabel);
    }
    primmaryThen()
    (nextLabel = primmaryUnlessElse(nextLabel))?
    <END> { System.out.println("LBL" + nextLabel); }
}

int primmaryUnlessElse(int label) : {
    int nextLabel;
} {
    <ELSE> {
        nextLabel = getNewLabel();
        System.out.println("\tvea LBL" + nextLabel);
        System.out.println("LBL" + label);
    }
    program()
    { return nextLabel; }
}

void primmaryUntil() : {
    int firstLabel, lastLabel;
} {
    <UNTIL> {
        firstLabel = getNewLabel();
        System.out.println("LBL" + firstLabel);
    }
    expression()
    lastLabel = primmaryDo(true)
    <END> {
        System.out.println("\tvea LBL" + firstLabel);
        System.out.println("LBL" + lastLabel);
    }
}

void primmaryWhile() : {
    int firstLabel, lastLabel;
} {
    <WHILE> {
        firstLabel = getNewLabel();
        System.out.println("LBL" + firstLabel);
    }
    expression()
    lastLabel = primmaryDo(false)
    <END> {
        System.out.println("\tvea LBL" + firstLabel);
        System.out.println("LBL" + lastLabel);
    }
}

void primmaryPrint() : {} {
    <PRINT>
    expression()  { System.out.println("\tprint"); }
}

void expression() : {} {
    mexpression() (expression2())?
}

void expression2() : {
    String operation;
} {
    (
        <ADDITION> { operation = "sum"; }
    |   <SUBSTRACTION> { operation = "sub"; }
    )
    expression() { System.out.println('\t' + operation); }
}

void mexpression() : {} {
    value() (mexpression2())?
}

void mexpression2() : {
    String operation;
} {
    (
        <MULTIPLICATION> { operation = "mul"; }
    |   <DIVISION> { operation = "div"; }
    )
    mexpression() { System.out.println('\t' + operation); }
}

void value() : {
    Token value;
} {
    value = <NUMBER> { System.out.println("\tmete " + value.image); }
|   value = <VARIABLE> { System.out.println("\tvalord " + value.image); }
|   <PARENTHESIS_START> expression() <PARENTHESIS_END>
}