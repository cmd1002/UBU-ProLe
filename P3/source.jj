options {
    STATIC=false;
}

PARSER_BEGIN(Compiler)

import java.util.Stack;

public class Compiler {
    public static void main(String args[]) throws java.io.FileNotFoundException {
        final Compiler compiler = initCompiler(args);
        final Stack<String> stack = new Stack<String>();

        try {
            compiler.program();
        } catch (ParseException ex) {
            System.out.println("Parser caught an unexpected exception, exiting...");
            return;
        }
    }

    static Compiler initCompiler(String args[]) throws java.io.FileNotFoundException {
        if (args.length < 1) {
            return new Compiler(System.in);
        }
        return new Compiler(new java.io.FileInputStream(args[0]));
    }
}
PARSER_END(Compiler)

TOKEN_MGR_DECLS : {}

TOKEN : {
    <"\n">
|   <#NUMBER: (["0"-"9"])+>
|   <#ALPHA: ["a"-"z", "A"-"Z"]>
|   <#VARIABLE: (<ALPHA> | "_") (<ALPHA> | <NUMBER> | "_")*>
|   <#ASSIGMENT: "=" | "+=" | "-=" | "/=" | "*=">
}
SKIP : {
    <~[]>
}

void program() : {} {
    statement() (program2())?
}

void program2(): {} {
    ";" program()
}

void statement() : { } {
    primmary()
    | <VARIABLE_STATEMENT: <VARIABLE>> assigment() expression()
}

void assigment() : {} {
    <ASSIGMENT_ASSIGMENT: <ASSIGMENT>>
}

void primmary() : {} {
    "if" expression() "then" program()
    ("elsif" expression() "then" program())*
    ("else" program()) "end"
|   "unless" expression() "then" program() ("else" program())? "end"
|   "until" expression() "do" program() "end"
|   "while" expression() "do" program() "end"
|   "print" expression()
}

void expression() : {} {
    mexpression() (expression2())?
}

void expression2() : {} {
    ("+" | "-") mexpression() expression2()
}

void mexpression() : {} {
    value() mexpression2()
}

void mexpression2() : {} {
    ("*" | "/") value() mexpression2()
}

void value() : {} {
    <VALUE_NUMBER: <NUMBER>>
|   <VALUE_VARIABLE: <VARIABLE>>
|    "(" expression() ")"
}